{"version":3,"sources":["Stopwatch.js","Countdown.js","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","useState","timerOn","timerStart","timerTime","timer","setTimer","timerId","useRef","useEffect","current","setInterval","Date","now","clearInterval","startTimer","centiseconds","Math","floor","slice","seconds","minutes","hours","className","onClick","Countdown","newTime","alert","adjustTimer","input","max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b87a110.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport \"./Stopwatch.css\";\n\nconst Stopwatch = () => {\n    const INITIAL_STATE = {\n        timerOn: false, // boolean value for if the timer is on\n        timerStart: 0, // the Unix Epoch (ms after 1970) time when the timer was started (or the past projected start time if the timer is resumed)\n        timerTime: 0 // total time (ms) that the timer has been running since start/reset\n    };\n\n    const [timer, setTimer] = useState(INITIAL_STATE);\n    const timerId = useRef()\n    const { timerTime, timerOn } = timer;\n\n    useEffect(() => {\n        /* Run timer if timerOn is true */\n        if (timerOn) {\n            timerId.current = setInterval(() => {\n                setTimer(timer => {\n                    return {\n                        ...timer,\n                        timerTime: Date.now() - timer.timerStart\n                    }\n                });\n            }, 10);\n        }\n        return () => {\n            clearInterval(timerId.current)\n        }\n    }, [timerOn])\n\n    const startTimer = () => {\n        setTimer(timer => {\n            return {\n                ...timer,\n                timerOn: true,\n                timerTime: timer.timerTime,\n                timerStart: Date.now() - timer.timerTime\n            }\n        });\n    };\n\n    const stopTimer = () => {\n        setTimer(timer => {\n            return {\n                ...timer,\n                timerOn: false\n            }\n        });\n        clearInterval(timerId.current);\n    };\n\n    const resetTimer = () => {\n        setTimer(timer => {\n            return {\n                ...timer,\n                timerStart: 0,\n                timerTime: 0\n            }\n        });\n    };\n\n    let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(timerTime / 3600000)).slice(-2);\n\n    return (\n        <div className=\"Stopwatch\">\n            <div className=\"Stopwatch-header\">Stopwatch</div>\n            <div className=\"Stopwatch-display\">\n                {hours} : {minutes} : {seconds} : {centiseconds}\n                {timerOn === false && timerTime === 0 && (\n                    <button onClick={startTimer}>Start</button>\n                )}\n                {timerOn === true && (\n                    <button onClick={stopTimer}>Stop</button>\n                )}\n                {timerOn === false && timerTime > 0 && (\n                    <button onClick={startTimer}>Resume</button>\n                )}\n                {timerOn === false && timerTime > 0 && (\n                    <button onClick={resetTimer}>Reset</button>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Stopwatch;","import React, { useState, useEffect, useRef } from 'react';\nimport \"./Countdown.css\";\n\n\nconst Countdown = () => {\n    const INITIAL_STATE = {\n        timerOn: false, // boolean value for if the timer is on\n        timerStart: 0, // the Unix Epoch (ms after 1970) time when the timer was started (or the past projected start time if the timer is resumed)\n        timerTime: 0 // total time (ms) that the timer has been running since start/reset\n    };\n\n    const [timer, setTimer] = useState(INITIAL_STATE);\n    const timerId = useRef()\n    const { timerTime, timerStart, timerOn } = timer;\n\n    useEffect(() => {\n        /* Run timer if timerOn is true */\n        if (timerOn) {\n            timerId.current = setInterval(() => {\n                const newTime = timerTime - 10;\n                if (newTime >= 0) {\n                    setTimer(timer => {\n                        return {\n                            ...timer,\n                            timerTime: newTime\n                        }\n                    })\n                } else {\n                    clearInterval(timerId.current)\n                    setTimer(timer => {\n                        return {\n                            ...timer,\n                            timerOn: false\n                        }\n                    })\n                    alert(\"Countdown ended\")\n                }\n            }, 10);\n        }\n        return () => {\n            clearInterval(timerId.current)\n        }\n    })\n\n    const startTimer = () => {\n        if (timerTime === 0) {\n            alert(\"set up your timer\")\n            return\n        }\n        setTimer(timer => {\n            return {\n                ...timer,\n                timerOn: true,\n                timerTime: timer.timerTime,\n                timerStart: timer.timerTime\n            }\n        });\n    };\n\n    const stopTimer = () => {\n        clearInterval(timerId.current);\n        setTimer(timer => {\n            return {\n                ...timer,\n                timerOn: false\n            }\n        });\n    };\n\n    const resetTimer = () => {\n        if (timerOn === false) {\n            setTimer(timer => {\n                return {\n                    ...timer,\n                    timerTime: timer.timerStart\n                }\n            });\n        }\n    };\n\n    const adjustTimer = input => {\n        const max = 216000000;\n        if (!timerOn) {\n            if (input === \"incHours\" && timerTime + 3600000 < max) {\n                setTimer(timer => {\n                    return {\n                        ...timer,\n                        timerTime: timerTime + 3600000\n                    }\n                });\n            } else if (input === \"decHours\" && timerTime - 3600000 >= 0) {\n                setTimer(timer => {\n                    return {\n                        ...timer,\n                        timerTime: timerTime - 3600000\n                    }\n                });\n            } else if (input === \"incMinutes\" && timerTime + 60000 < max) {\n                setTimer(timer => {\n                    return {\n                        ...timer,\n                        timerTime: timerTime + 60000\n                    }\n                });\n            } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\n                setTimer(timer => {\n                    return {\n                        ...timer,\n                        timerTime: timerTime - 60000\n                    }\n                });\n            } else if (input === \"incSeconds\" && timerTime + 1000 < max) {\n                setTimer(timer => {\n                    return {\n                        ...timer,\n                        timerTime: timerTime + 1000\n                    }\n                });\n            } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\n                setTimer(timer => {\n                    return {\n                        ...timer,\n                        timerTime: timerTime - 1000\n                    }\n                });\n            }\n        }\n    }\n\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60) % 60).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(timerTime / 3600000) % 60).slice(-2);\n\n    return (\n        <div className=\"Countdown\">\n            <div className=\"Countdown-header\">Countdown</div>\n            <div className=\"Countdown-label\">Hours : Minutes : Seconds</div>\n            <div className=\"Countdown-display\">\n                <button onClick={() => adjustTimer(\"incHours\")}>&#8679;</button>\n                <button onClick={() => adjustTimer(\"incMinutes\")}>&#8679;</button>\n                <button onClick={() => adjustTimer(\"incSeconds\")}>&#8679;</button>\n\n                <div className=\"Countdown-time\">\n                    {hours} : {minutes} : {seconds}\n                </div>\n\n                <button onClick={() => adjustTimer(\"decHours\")}>&#8681;</button>\n                <button onClick={() => adjustTimer(\"decMinutes\")}>&#8681;</button>\n                <button onClick={() => adjustTimer(\"decSeconds\")}>&#8681;</button>\n            </div>\n\n            {timerOn === false && (timerStart === 0 || timerTime === timerStart) && (\n                <button className=\"Button-start\" onClick={startTimer}>\n                    Start\n                </button>\n            )}\n            {timerOn === true && timerTime >= 1000 && (\n                <button className=\"Button-stop\" onClick={stopTimer}>\n                    Stop\n                </button>\n            )}\n            {timerOn === false &&\n                (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n                    <button className=\"Button-start\" onClick={startTimer}>\n                        Resume\n                    </button>\n                )}\n\n            {(timerOn === false || timerTime < 1000) &&\n                (timerStart !== timerTime && timerStart > 0) && (\n                    <button className=\"Button-reset\" onClick={resetTimer}>\n                        Reset\n                    </button>\n                )}\n        </div>\n    );\n}\n\n\nexport default Countdown;","import React from 'react';\nimport './App.css';\nimport Stopwatch from './Stopwatch';\nimport Countdown from './Countdown';\nimport UserForm from './UserForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-title\">Timers Demo</div>\n      <div className=\"Timers\">\n        <Stopwatch />\n        <Countdown />\n        {/* <UserForm /> */}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}